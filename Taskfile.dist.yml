---
version: "3"

includes:
  gotest:
    taskfile: ../taskfiles/gotest.yml
    # optional because the ../taskfiles dir is cloned via bootstrap below
    optional: true
    dir: .
  azurite:
    taskfile: ../taskfiles/azurite.yml
    # optional because the ../taskfiles dir is cloned via bootstrap below
    optional: true
    dir: .

tasks:
  bootstrap:
    desc: bootstrap the development environment
    cmds:
      - |
        GIT_BOOTSTRAP_SH=$(curl -fsSL https://raw.githubusercontent.com/robinbryce/git-bootstrap/refs/heads/main/git-bootstrap.v2.sh)
        sh -c "$GIT_BOOTSTRAP_SH" - clone .
        sh -c "$GIT_BOOTSTRAP_SH" - checkout .

        if [ -f ../go.work ]; then
          echo "go.work exists, you may need to update it"
        else
        cat <<EOF > ../go.work
        go 1.24.4
        use (
        	./go-datatrails-common
        	./go-merklelog-datatrails
        	./go-datatrails-merklelog/massifs
        	./go-datatrails-merklelog/mmr
        	./go-datatrails-serialization/eventsv1
        	./go-datatrails-simplehash
        	./go-merklelog-azure
        	./go-merklelog-fs
        	./go-merklelog-provider-testing
          ./veracity
        )
        EOF
        fi
        exit 0

  build:
    desc: "run go build against all go modules"

    cmds:
      - |
        go build -o veracity cmd/veracity/main.go

  test:
    desc: run all the tests
    cmds:
      - task: test:unit
      - task: test:integration

  test:unit:
    desc: run the unit tests
    cmds:
      - task: azurite:preflight
      - task: gotest:unit
      - task: azurite:stop

  test:integration:
    cmds:
      - task: azurite:preflight
      - task: gotest:integration
      - task: azurite:stop

  test:datatrails:public:
    desc: "run the integration tests against known public content on datatrails"
    vars:
      GO_TEST_TAGS: '{{.GO_TEST_TAGS | default "-tags integration,prodpublic"}}'
      GO_MOD_DIRS:
        sh: find . -type f -name 'go.mod'

    cmds:
      - for: { var: GO_MOD_DIRS, as: MODULE }
        cmd: |
          cd $(dirname {{.MODULE}})
          mkdir -p {{.UNITTEST_DIR}}
          go test \
            {{.GO_TEST_TAGS}} \
            -race \
            -v \
            ./...

  test:binary:setup:
    cmds:
      - |
        downloadDir=$(mktemp -d)
        installDir={{.ROOT_DIR}}/tests/systemtest/shunit
        mkdir -p ${installDir}

        # We need to get the master branch of shunit2 to get junit output
        wget -q -O ${downloadDir}/shunit2.zip https://github.com/kward/shunit2/archive/refs/heads/master.zip
        unzip -q ${downloadDir}/shunit2.zip -d ${downloadDir}

        cp ${downloadDir}/shunit2-master/shunit2 ${installDir}
        cp ${downloadDir}/shunit2-master/shunit2_test_helpers ${installDir}
        cp ${downloadDir}/shunit2-master/test_runner ${installDir}
        cp -r ${downloadDir}/shunit2-master/lib ${installDir}

        rm -rf ${downloadDir}
        pushd {{.ROOT_DIR}}/tests/systemtest
        cat ./test-setup.sh \
          ./test-01-*.sh \
          ./test-02-*.sh \
          ./test-03-*.sh \
          ./test-04-*.sh \
        > ./run.sh
        popd

  test:binary:
    vars:
      OUTARGS: '{{.OUTARGS | default "--output-junit-xml=res.xml"}}'
    cmds:
      - task: test:binary:setup
      - task: test:binary:run
        vars:
          OUTARGS: "{{.OUTARGS}}"

  test:binary:run:
    vars:
      OUTARGS: '{{.OUTARGS | default ""}}'
    cmds:
      - |
        pushd {{.ROOT_DIR}}/tests/systemtest
        ./shunit/shunit2 ./run.sh  {{.OUTARGS}}
        popd

  test:binary:one:
    requires:
      vars: [TEST]
    cmds:
      - |
        pushd {{.ROOT_DIR}}/tests/systemtest
        cat ./test-setup.sh \
          ./test-{{.TEST}}-*.sh \
        > ./run.sh
        ./shunit/shunit2 ./run.sh
        popd
