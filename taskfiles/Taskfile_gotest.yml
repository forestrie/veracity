---
# Tests written using go lang's 'go test' framework. Includes unit and integration tests

version: '3'

# Environment variables set for all commands.
env_build: &env_build
  # XDG_CACHE_HOME: This may need to be set for python builds, but try to use
  # virtual env instead.

  # The GOCACHE in a linux container on Docker for windows MUST be on a linuxy
  # file system
  GOCACHE: /tmp/datatrails/veracity

vars:
  UNITTEST_DIR: test_results
  VERBOSE: ""

tasks:

  go:azurite:
    desc: "run integration tests which depend only on azurite"
    dir: ../
    vars:
      # empty or -tag tag1,tag2 ...
      GO_TEST_TAGS: '{{.GO_TEST_TAGS | default "-tags integration,azurite"}}'
      GO_MOD_DIRS:
        sh: find . -type f -name 'go.mod'

    cmds:
      - for: { var: GO_MOD_DIRS, as: MODULE}
        cmd: |
          cd $(dirname {{.MODULE}})
          mkdir -p {{.UNITTEST_DIR}}
          go test \
            {{.GO_TEST_TAGS}} \
            -race \
            -v \
            -coverprofile={{.UNITTEST_DIR}}/main.out \
            ./...
          # gocov convert {{.UNITTEST_DIR}}/main.out > {{.UNITTEST_DIR}}/coverage.json

  go:prodpublic:
    desc: "run the integration tests"
    dir: ../
    vars:
      GO_TEST_TAGS: '{{.GO_TEST_TAGS | default "-tags integration,prodpublic"}}'
      GO_MOD_DIRS:
        sh: find . -type f -name 'go.mod'

    cmds:
      - for: { var: GO_MOD_DIRS, as: MODULE}
        cmd: |
          cd $(dirname {{.MODULE}})
          mkdir -p {{.UNITTEST_DIR}}
          go test \
            {{.GO_TEST_TAGS}} \
            -race \
            -v \
            -coverprofile={{.UNITTEST_DIR}}/main.out \
            ./...
          # gocov convert {{.UNITTEST_DIR}}/main.out > {{.UNITTEST_DIR}}/coverage.json


  go:unit:
    desc: "run unit tests"
    dir: ../
    vars:
      GO_TEST_TAGS: '{{.GO_TEST_TAGS | default ""}}'
      GO_MOD_DIRS:
        sh: find . -type f -name 'go.mod'
    cmds:
      - for: { var: GO_MOD_DIRS, as: MODULE}
        cmd: |
          cd $(dirname {{.MODULE}})
          mkdir -p {{.UNITTEST_DIR}}
          go test \
            {{.GO_TEST_TAGS}} \
            -race \
            -v \
            -coverprofile={{.UNITTEST_DIR}}/main.out \
            ./...
          # gocov convert {{.UNITTEST_DIR}}/main.out > {{.UNITTEST_DIR}}/coverage.json
